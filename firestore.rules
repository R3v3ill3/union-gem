rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /campaigns/{campaignId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Validate campaign data structure
      function isValidCampaign() {
        let data = request.resource.data;
        return data.keys().hasAll([
          'core_issue_details',
          'documents_and_links',
          'stakeholders',
          'political_and_strategic',
          'campaign_outcome'
        ]) &&
        data.core_issue_details.keys().hasAll([
          'project_name',
          'union_name',
          'campaign_target',
          'decision_type',
          'decision_status',
          'jurisdiction',
          'campaign_topic',
          'issue_description'
        ]) &&
        data.stakeholders.keys().hasAll([
          'decision_makers',
          'industry_actors',
          'advocacy_groups',
          'economic_interests',
          'community_dynamics',
          'union_density',
          'worker_demographics'
        ]) &&
        data.political_and_strategic.keys().hasAll([
          'political_motivations',
          'ideological_framing',
          'corporate_influence',
          'union_strategy',
          'industrial_leverage'
        ]) &&
        data.campaign_outcome.keys().hasAll([
          'primary_goal',
          'primary_audience',
          'worker_demands',
          'success_metrics'
        ]);
      }

      // Allow create if data is valid
      allow create: if request.auth != null && isValidCampaign();
      
      // Allow update if data remains valid
      allow update: if request.auth != null && 
                      request.auth.uid == resource.data.userId && 
                      isValidCampaign();
    }
  }
}